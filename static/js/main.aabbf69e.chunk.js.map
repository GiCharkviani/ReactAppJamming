{"version":3,"sources":["Util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/PlayList/PlayList.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","getting","target","value","setState","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playListTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playListName","removaTrack","updatePlaylistName","savePlaylist","find","savedtrack","push","filter","currentTrack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aabbf69e.chunk.js","sourcesContent":["const clinetId = '5742c0e3f4444b67a549944222cd7613';\r\nconst redirectUri = 'https://GiCharkviani.github.io/ReactAppJamming/';\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n\r\n    getAccessToken(){\r\n        if(accessToken){\r\n            return accessToken;\r\n        }\r\n        // check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if(accessTokenMatch && expiresInMatch){\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            window.setTimeout(()=>accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        }else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clinetId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term){\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, { headers: {\r\n            Authorization: `Bearer ${accessToken}`\r\n        }\r\n     }).then(response => {\r\n         return response.json();\r\n     }).then(jsonResponse => {\r\n         if(!jsonResponse.tracks){\r\n             return [];\r\n         }\r\n         return jsonResponse.tracks.items.map(track => ({\r\n             id: track.id,\r\n             name: track.name,\r\n             artist: track.artists[0].name,\r\n             album: track.album.name,\r\n             uri: track.uri\r\n         }))\r\n     })\r\n    },\r\n\r\n    savePlayList(name, trackUris){\r\n        if(!name || !trackUris.length){\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}`};\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { headers: headers}).then(response => response.json()).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({name: name})\r\n            }).then(response => response.json()).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks\r\n                `, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({uris:trackUris})\r\n                })\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            term: ''\r\n        }\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n\r\n    search(){\r\n        this.props.onSearch(this.state.term)\r\n    }\r\n\r\n\r\n    handleTermChange(event){\r\n        const getting = event.target.value;\r\n        this.setState({\r\n            term: getting\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input onChange={this.handleTermChange}  placeholder=\"Enter A Song, Album, or Artist\"  />\r\n                <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    renderAction(){\r\n        if(this.props.isRemoval){\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        }else {\r\n            return <button className='Track-action' onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track)\r\n    }\r\n\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                { this.props.tracks &&\r\n                    this.props.tracks.map(track => {\r\n                        return <Track track={track} \r\n                        key={track.id} \r\n                        onAdd={this.props.onAdd} \r\n                        onRemove={this.props.onRemove}\r\n                        isRemoval={this.props.isRemoval} />\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n  \r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n               <TrackList tracks={this.props.searchResults} \r\n               onAdd={this.props.onAdd}\r\n               isRemoval={false} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\n\r\nclass Playlist extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event){\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={'New Playlist'} onChange={this.handleNameChange}/>\r\n                <TrackList tracks={this.props.playListTracks} \r\n                onRemove={this.props.onRemove}\r\n                isRemoval={true} />\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../PlayList/PlayList';\nimport Spotify from '../../Util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playListName: 'My Playlist',\n      playListTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removaTrack = this.removaTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n\n\n  addTrack(track){\n    let tracks = this.state.playListTracks;\n    if(tracks.find(savedtrack => savedtrack.id === track.id)){\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({playListTracks: tracks})\n  }\n\n\n  removaTrack(track){\n    let tracks = this.state.playListTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({playListTracks: tracks});\n  }\n\n  updatePlaylistName(name){\n    this.setState({\n      playListName: name\n    })\n  }\n\n  savePlaylist(){\n    const trackUris = this.state.playListTracks.map(track => track.uri);\n    Spotify.savePlayList(this.state.playListName, trackUris).then(()=> {\n      this.setState({playListName: 'New Playlist', playListTracks: []})\n    })\n  }\n\n  search(term){\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} \n            onAdd={this.addTrack} />\n            <Playlist playListName={this.state.playListName} playListTracks={this.state.playListTracks} onRemove={this.removaTrack} onNameChange={this.updatePlaylistName}  onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}